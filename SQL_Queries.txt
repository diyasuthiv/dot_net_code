-- To Print all values from a table
select * from Employee
select * from Department

--where statement for conditions
select * from Employee where DeptID=30 and Salary>10000

--and for when we want both conditions to be te
select * from Employee
where DeptID=10 or DeptID=5

--to select values that do not match a condition
select * from Employee
where Desg!='Manager'

select * from Employee
where Salary>=20000 and Salary<=50000

--in between like operators
--in operator allows to compare a list or set of values
-- between allows us to compare a range of values
--like allows us to compare text patterns

select * from Employee 
where DepID in(10,40)
--will show employees in ddept 30 and 40

select * from Employee 
where Name in('Smith','Andy')
--will show only employees of name Smth and Andy

--between operator has to go lower limit to upper limit
--it is inclusive of the values specified, =< and =>
--it works for date datatypes also
select * from Employee
where Salary between 20000 and 50000

--% and _
--% represents 0 or many charecters
--_ represents exaclty one charecter

--to compare the irst letter
select * from Employee
where Name like 'A%'
--will show employees whose name starts with A

--employees whose name contains A
select * from Employee
where Name like '%A%'

--employees whose name's second letter is E
select * from Employee
where Name like '_E%'

--employees whose designation is some form of manager
select * from Employee
where Desg like '%Manager%'

--third last chrecter of the name is A
select * from Employee
where Name like '%A__'

--null
--null means no value, there is nothing stored there
--It s not 0 or space. Just empty
--to compare null we have is null, which compares null values
select * from Employee
where DeptID is null
--will show emplyees whose dept number is null

--in mSSQL it shows null aS NULL. In other DB, it might just show a blank

--this may work, but there is operator precedence, where ir is more than and
select * from Employee
where Salary>30000 and DeptID=10 or DeptID=30

--instead we can write () to change the precedence of the operatrs
select * from Employee
where Salary>30000 and (DeptID=10 or DeptID=30)

--Data Manipulation Language
--insert -> to add data into a table
--update -> to modify data in the table
--delete -> to remove data from the table

insert into Departement values(60,'HR','Mr Vignesh','Nasik')
--if we do not specify values for all the columns, it will show an error
--If the values for one is unkonw, we can specify null for that

insert into Department(DeptID, DepName, DepHead, Location) values
(20,'Marketing', 'Ms Anita','Delhi)

--to remove rows from table, use delete
--t will conditionally delete rows
--if we do not specify conditions, it will delete all the rows

--mssql also has autocommit, where it saves automatically without the commit command
delete from Department
where DeptName='dd'
--if we do not specify a condition it will delete the entire table

--if the row to be deleted has a corresponsing record reltaed to it in another table, it will not allow for deletion
--as long as the record exists in the other table, it will not allow for deletion

delete from Department where DeptName='HR'

--update
--to change columns
update Department
set  DeptName='Sales', Location='Delhi',DeptHead='Ms Aurora'
where DeptID=10

--
--Left tab called Programmability
--Has all programming constrcuts
-Stored procedure
--right click on stored procedure and click on stored procedure
--we will get a template for cratinga  proceudre'
--ignore comments

--we can pass parameters, but it is not compulsory

--Simple procedure example to retrive all data from a table
CREATE PROCEDURE GetEmployeeData
	-- Add the parameters for the stored procedure here
	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select * from Employee
END
GO

--if we click on Execute, it shows command completed successfully
--if we go to stored procedures, it will show up there

--to create a parameterised procedure
--information of employee based on EmployeeNo
--Accepting empNo and fetch record of single emplyee

--To call [rocedure in sql, we will write 
exec dbo.GetEmployeeData
--or just
exec GetEmployeeData

--if that does not work, use
use <DBName>
exec <dbo.PrecedureName>

--Stores procedures and all are called TSQl, Transact SQL. It is programming in SQL
--these variables in tsql are deined prefixed with @

--Stored procedure with parameters to specifically display employee info of an employee whose EmpID has been entered
CREATE PROCEDURE GetEmpWithEmpID
	-- Add the parameters for the stored procedure here
	(@EmpID int)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	select * from Employee where EmpD=@EmpID
END

---
--To delete emp info of emplyee where empId given
CREATE PROCEDURE DeleteEmpWithEMPID
	-- Add the parameters for the stored procedure here
	(@EmpID int)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	delete from Employee where EmpD=@EmpID
END
GO
---

--Procedure which will accept parameters and input data into Employee
CREATE PROCEDURE InsertEmployee 
	-- Add the parameters for the stored procedure here
	(@EmpID int, @EName varchar, @Desg varchar, @Salary int, @DeptID int)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	insert into Employee values(@EmpID,@EName,@Desg,@Salary,@DeptID)
	print 'Employee data inserted successfully'
END
GO

--Maintain the sequence of the columns of the table

--to run the stores procedure
exec dbo.InsertEmployee 002,'Michael','Sales Executive', 5000, 60

--To update information of the employee
CREATE PROCEDURE UpdateEmpInfo
	-- Add the parameters for the stored procedure here
	(@EmpID int, @EName varchar, @Desg varchar, @Salary int, @DeptID int)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	update Employee 
	set Name=@EName , 
	Desg=@Desg , 
	Salary=@Salary, 
	DeptID=@DeptID 
	where EmpD=@EmpID
	print 'Employee Details updates sucessfuly'

END
GO

--
--it is not entering the complete name and designation, only first letter
--This is since we have not specified the varchcar size within the procedure

--to modify a procedure we write the same thing but with alter procedure in the beginning istead of create





